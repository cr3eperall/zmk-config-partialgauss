/*
 * Copyright (c) 2020 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/matrix_transform.h>
// #include <dt-bindings/nano33ble.h>
// #include <layouts/foostan/corne/5column.dtsi>
// #include <layouts/foostan/corne/6column.dtsi>

// &foostan_corne_6col_layout {
//     transform = <&default_transform>;
// };

// &foostan_corne_5col_layout {
//     transform = <&five_column_transform>;
// };

&adc {
    status = "okay";

    #address-cells = <1>;
    #size-cells = <0>;
    // nrf52840/nano_33_ble adc pin assignments:
    // AIN2 = P0.04 (A0 in nano_33_ble)
    // AIN3 = P0.05 (A1 in nano_33_ble)
    // AIN6 = P0.30 (A2 in nano_33_ble)
    // AIN5 = P0.29 (A3 in nano_33_ble)
    // AIN7 = P0.31 (A4 in nano_33_ble)
    // AIN0 = P0.02 (A5 in nano_33_ble)
    // AIN4 = P0.28 (A6 in nano_33_ble)
    // AIN1 = P0.03 (A7 in nano_33_ble)
    channel@0 {
        reg = <0>;
        zephyr,input-positive = <NANO_33_BLE_A0>;
        zephyr,gain = "ADC_GAIN_1_2";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10)>;
        zephyr,resolution = <12>;
    };
    channel@1 {
        reg = <1>;
        zephyr,input-positive = <NANO_33_BLE_A1>;
        zephyr,gain = "ADC_GAIN_1_2";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10)>;
        zephyr,resolution = <12>;
    };
    channel@2 {
        reg = <2>;
        zephyr,input-positive = <NANO_33_BLE_A2>;
        zephyr,gain = "ADC_GAIN_1_2";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10)>;
        zephyr,resolution = <12>;
    };
    channel@3 {
        reg = <3>;
        zephyr,input-positive = <NANO_33_BLE_A3>;
        zephyr,gain = "ADC_GAIN_1_2";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10)>;
        zephyr,resolution = <12>;
    };
    channel@4 {
        reg = <4>;
        zephyr,input-positive = <NANO_33_BLE_A4>;
        zephyr,gain = "ADC_GAIN_1_2";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10)>;
        zephyr,resolution = <12>;
    };
    channel@5 {
        reg = <5>;
        zephyr,input-positive = <NANO_33_BLE_A5>;
        zephyr,gain = "ADC_GAIN_1_2";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10)>;
        zephyr,resolution = <12>;
    };
};

/ {
    chosen {
        // zephyr,display = &oled;
        zmk,kscan = &kscan;
        zmk,physical-layout = &physical_layout0;
    };
    
    physical_layout0: physical_layout_0 { // First physical layout, use different naming for other layouts
        compatible = "zmk,physical-layout";
        display-name = "Default Layout";
        kscan = <&kscan>; // Label of the kscan node, optional if all layouts use the same
        transform = <&default_transform>; // Label of the matrix transform for this layout
    };


    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <4>;
// |  SW1  |  SW2  |  HE1  |  HE2  |  HE3  |  SW3  | |  SW3  |  HE3  |  HE2  |  HE1  |  SW2  |  SW1  |
// |  SW4  |  SW5  |  HE4  |  HE5  |  HE6  |  SW6  | |  SW6  |  HE6  |  HE5  |  HE4  |  SW5  |  SW4  |
//         |  SW7  |  SW8  |  SW9  | SW10  | SW11  | | SW11  | SW10  |  SW9  |  SW8  |  SW7  | 
//                         |  SW12 | SW13  | SW14  | | SW14  | SW13  | SW12  |
        map = <
    RC(0,0) RC(0,1) RC(3,0) RC(3,1) RC(3,2) RC(0,4)   RC(0,5) RC(3,5) RC(3,6) RC(3,7) RC(0,8) RC(0,9)
    RC(1,0) RC(1,1) RC(4,0) RC(4,1) RC(4,2) RC(1,4)   RC(1,5) RC(4,5) RC(4,6) RC(4,7) RC(1,8) RC(1,9)
            RC(2,1) RC(0,2) RC(0,3) RC(1,3) RC(2,4)   RC(2,5) RC(1,6) RC(0,6) RC(0,7) RC(2,8)
    RC(3,3) RC(3,4)         RC(1,2) RC(2,2) RC(2,3)   RC(2,6) RC(2,7) RC(1,7)         RC(3,8)  RC(3,9)
        >;
    };

    kscan_gpio: kscan-gpio {
        compatible = "zmk,kscan-gpio-matrix";
        wakeup-source;

        diode-direction = "col2row";
        row-gpios
            = <&nano_33_ble 12 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&nano_33_ble 11 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&nano_33_ble 10 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            ;

    };
    kscan: kscan0 {
        compatible = "zmk,kscan-composite";
        wakeup-source;
        rows = <4>;
        columns = <12>;
        gpio-matrix {
            kscan = <&kscan_gpio>;
            row-offset = <0>;
            col-offset = <0>;
        };
        adc-direct {
            kscan = <&kscan_adc>;
            row-offset = <3>;
            col-offset = <0>;
        };
        select-switches {
            kscan = <&kscan_selector>;
            row-offset = <3>;
            col-offset = <3>;
        };
    };
    
    kscan_forwarder: kscan-forwarder {
        compatible = "zmk,kscan-forwarder";
    };

        // 1.0 o 2.1
        // 1.40 -> 0.92 GKS norm =  0.48
        // 0.92 -> 0.60 DRV norm =  0.32 ~= 0.402
        // 1.8 -> 2.6   GKS up   =  0.8
        // 1.2 -> 1.96  DRV up   =  0.76
// high power mode: multiple adc reads and average
// low power mode: single adc read with lower resolution
    kscan_adc: kscan-adc {
        compatible = "zmk,kscan-he-direct-pulsed";
        resolution = <12>;
        pulse-read;
        // calibrate;
        read-turn-on-time= <50>;
        wait-period-idle= <5>;
        wait-period-press= <1>;
        kscan-forwarder = <&kscan_forwarder>;
        kscan_adc_top: top {
            enable-gpios= <&nano_33_ble_gpio_a 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;
            // switch-pressed-is-higher;
            switch-height = <3300>;
        };
        kscan_adc_bot: bot {
            enable-gpios= <&nano_33_ble_gpio_a 7 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;
            // switch-pressed-is-higher;
            switch-height = <3300>;
        };
    };
    kscan_selector: kscan-selector {
        compatible = "zmk,kscan-gpio-direct"; //TODO implement custom driver with pull_up toggling
        wakeup-source;
    };

    raw_sp: raw-he-signal-processor{
        compatible = "he,raw-signal-processor";
        #input-processor-cells = <0>;
        matrix-size = <2 3>;
        filter-coefficients = <0x3f9490b 0xd92ae7c 0x3fa490b 0xd92ae7c 0x3f9490b 0xd92ae7c 0x3ff0000 0x0000000 0xbff8f9e 0x1700768 0x3fe485f 0xa92649f>;
    };
    
    input_listener {
        compatible = "zmk,input-listener";
        device = <&kscan_adc>;
        input-processors = <&raw_sp>;
    };

};

// &nano_33_ble_i2c {
//     status = "okay";

//     oled: ssd1306@3c {
//         compatible = "solomon,ssd1306fb";
//         reg = <0x3c>;
//         width = <128>;
//         height = <32>;
//         segment-offset = <0>;
//         page-offset = <0>;
//         display-offset = <0>;
//         multiplex-ratio = <31>;
//         segment-remap;
//         com-invdir;
//         com-sequential;
//         inversion-on;
//         prechargep = <0x22>;
//     };
// };